#!/bin/python
# Undo last mv commands
import shutil
from pathlib import Path
zsh_history_path = Path.home() / ".zsh_history"
fish_history_path = Path.home() / ".local/share/fish/fish_history"


def parse_fish_history_line(line):
    if line[0] != "-":
        return ""
    else:
        return line.split(":")[-1].strip()  # Retrieve the full comman


def parse_zsh_history_line(line, omz=True):
    if not omz:
        raise NotImplementedError
    return ";".join(line.strip().split(";")[1:])


def filter_history(cmd="mv", max_length=50,
                   path=fish_history_path,
                   parse=parse_fish_history_line):
    """
    Filter history to lines with cmd.
    :param str cmd: Which command to search for in the history.
    :param bool omz: Parse history as oh-my-zsh history if True. Otherwise parse as default zsh history.
    """
    commands = []
    with open(path, "r") as f:
        lines = f.readlines()
        for line in reversed(lines):
            command = parse(line)
            if command:
                commands.append(command)
                if len(commands) >= max_length:
                    break
    commands = [c for c in commands if c.split()[0] == cmd]
    return commands


def reverse_command(command):
    """
    Return sources and destinations needed to do the inverse of command
    """
    command = command.split()
    destination = Path(command[-1])
    original_sources = [Path(f) for f in command[1:-1]]
    if destination.is_file():
        sources = [destination.expanduser().parent / f.name
                   for f in original_sources]
    else:
        sources = [destination.expanduser() / f.name
                   for f in original_sources]
    return sources, original_sources


commands = filter_history("mv")
if not commands:
    exit("No mv command available.")

for i, c in enumerate(commands):
    print(f"[{i}] {c}")

choice = input("Your choice: ")
command = commands[int(choice)]

sources, destinations = reverse_command(command)

print("Command to undo:", command)
for source, destination in zip(sources, destinations):
    print(str(source) + " -> " + str(destination))
    choice = input("OK?[y/N] ")
    if choice == "y":
        if destination.is_file():
            choice = input("Destination file exists. Overwrite?[y/N] ")
        if choice == "y":
            print(shutil.move(source, destination))
print("Done.")
